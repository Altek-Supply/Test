{"ast":null,"code":"var _jsxFileName = \"E:\\\\Sani\\\\Documents\\\\Smart Search Github Pages\\\\Test\\\\src\\\\components\\\\ImportFile.js\";\nimport React from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImportFile = _ref => {\n  let {\n    selectedData,\n    manualInputs\n  } = _ref;\n  const handleDownload = () => {\n    console.log('Manual input in importfile is:', manualInputs);\n    console.log('Datacard selections made in importfile are:', selectedData);\n    // Create a new workbook\n    const workbook = XLSX.utils.book_new();\n\n    // Format the selectedData and manualInputs into the appropriate format (array of arrays)\n    const sheetData = selectedData.map(_ref2 => {\n      var _manualInputs$name, _manualInputs$name2;\n      let {\n        item,\n        name,\n        manualInput\n      } = _ref2;\n      return [name, item ? item[0] : (manualInput === null || manualInput === void 0 ? void 0 : manualInput.SAP) || '', item ? item[1] : (manualInput === null || manualInput === void 0 ? void 0 : manualInput.ProductDescription) || '', ((_manualInputs$name = manualInputs[name]) === null || _manualInputs$name === void 0 ? void 0 : _manualInputs$name.AlternateSAP) || '',\n      // Use \"AlternateSAP\"\n      ((_manualInputs$name2 = manualInputs[name]) === null || _manualInputs$name2 === void 0 ? void 0 : _manualInputs$name2.AlternateProductDescription) || '' // Use \"AlternateProductDescription\"\n      ];\n    });\n\n    // Create a new worksheet\n    const worksheet = XLSX.utils.aoa_to_sheet([['End User Description', 'SAP Item Number', 'Product Description', 'Alternate SAP', 'Alternate Product Description'], ...sheetData]);\n    // Add the worksheet to the workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'SelectedData');\n    // Convert the workbook to a binary string\n    const excelFile = XLSX.write(workbook, {\n      type: 'binary'\n    });\n\n    // Create a blob with the binary data and create a download link\n    const blob = new Blob([s2ab(excelFile)], {\n      type: 'application/octet-stream'\n    });\n    const url = URL.createObjectURL(blob);\n\n    // Trigger the download\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'selected_data.xlsx';\n    a.click();\n    // Cleanup\n    URL.revokeObjectURL(url);\n  };\n\n  // Convert a string to an array buffer\n  const s2ab = s => {\n    const buf = new ArrayBuffer(s.length);\n    const view = new Uint8Array(buf);\n    for (let i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xff;\n    return buf;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"button-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDownload,\n      children: \"Download Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_c = ImportFile;\nexport default ImportFile;\nvar _c;\n$RefreshReg$(_c, \"ImportFile\");","map":{"version":3,"names":["React","XLSX","jsxDEV","_jsxDEV","ImportFile","_ref","selectedData","manualInputs","handleDownload","console","log","workbook","utils","book_new","sheetData","map","_ref2","_manualInputs$name","_manualInputs$name2","item","name","manualInput","SAP","ProductDescription","AlternateSAP","AlternateProductDescription","worksheet","aoa_to_sheet","book_append_sheet","excelFile","write","type","blob","Blob","s2ab","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Sani/Documents/Smart Search Github Pages/Test/src/components/ImportFile.js"],"sourcesContent":["import React from 'react';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst ImportFile = ({ selectedData, manualInputs }) => {\r\n  \r\n  const handleDownload = () => {\r\n    console.log('Manual input in importfile is:', manualInputs)\r\n    console.log('Datacard selections made in importfile are:', selectedData)\r\n    // Create a new workbook\r\n    const workbook = XLSX.utils.book_new();\r\n\r\n    \r\n    // Format the selectedData and manualInputs into the appropriate format (array of arrays)\r\n    const sheetData = selectedData.map(({ item, name, manualInput }) => [\r\n      name,\r\n      item ? item[0] : manualInput?.SAP || '',\r\n      item ? item[1] : manualInput?.ProductDescription || '',\r\n      manualInputs[name]?.AlternateSAP || '',  // Use \"AlternateSAP\"\r\n      manualInputs[name]?.AlternateProductDescription || '',  // Use \"AlternateProductDescription\"\r\n    ]);\r\n\r\n    // Create a new worksheet\r\n    const worksheet = XLSX.utils.aoa_to_sheet([['End User Description', 'SAP Item Number', 'Product Description', 'Alternate SAP', 'Alternate Product Description'], ...sheetData]);\r\n    // Add the worksheet to the workbook\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'SelectedData');\r\n    // Convert the workbook to a binary string\r\n    const excelFile = XLSX.write(workbook, { type: 'binary' });\r\n\r\n    // Create a blob with the binary data and create a download link\r\n    const blob = new Blob([s2ab(excelFile)], { type: 'application/octet-stream' });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    // Trigger the download\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'selected_data.xlsx';\r\n    a.click();\r\n    // Cleanup\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  // Convert a string to an array buffer\r\n  const s2ab = (s) => {\r\n    const buf = new ArrayBuffer(s.length);\r\n    const view = new Uint8Array(buf);\r\n    for (let i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xff;\r\n    return buf;\r\n  };\r\n\r\n  return (\r\n    <div className=\"button-container\">\r\n    <button onClick={handleDownload}>Download Excel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImportFile;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}